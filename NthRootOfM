//Newton Raphson Method
public class Solution {
    public static double findNthRootOfM(int n, long m) {
        return find_root(m, n, 0.0000009);
    }

//f(x, n) -> raise x to n
    static double find_pow(double x, int n){

        if(n==0)    return 1;

        if(n==1)    return x;

        if(n%2==0)
            return find_pow(x, n/2)*find_pow(x, n/2);

        else    return find_pow(x, n/2)*find_pow(x, n/2)*x;
    }
// f(x) taken in the question
    static double function( double x, int n,double val){
        return find_pow(x, n) - val;
    }
//f'(x) taken in the question
    static double function_derivative(double x, int n, double val){

        if(n==1)
            return 1;
        return n*find_pow(x, n-1);
    }
//driving function
    static double find_root(double val, int n, double error){
        double previous_root=2.0;
        double root=previous_root - function(previous_root, n, val)/function_derivative(previous_root, n, val);
        while(Math.abs(root-previous_root) >= error){
            previous_root= root;
            root= previous_root - function(previous_root, n, val)/function_derivative(previous_root, n, val);
        }
        return root;
    }
}
