import java.util.*;

public class Solution {

    int solve(String[] board , int n, int m)
	{
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        
        
        int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
        boolean[][] visited = new boolean[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                visited[i][j] = true;
                if(dfs(i,j,i,j,board[i].charAt(j),board,dir,visited,1))
                    return 1;
                visited[i][j] = false;
            }
        }
        
        return 0;       
        
	}
	
    public static boolean dfs(int si,int sj,int i,int j,char color,String[] board,int[][] dir,boolean[][] visited,int count){    
        if(count>=4 && i==si && j==sj){
            return true;
        }
        
        for(int[] d : dir){
            int x = i+d[0];
            int y = j+d[1];
            if(count>=4 && x==si && y==sj){
                return true;
            }
            
            if(x>=0 && y>=0 && x<board.length && y<board[0].length() && !visited[x][y] && board[x].charAt(y)==color){
                visited[x][y] = true;
                if(dfs(si,sj,x,y,color,board,dir,visited,count+1))
                    return true;
                visited[x][y] = false;
            }
        }
        
        return false;
    }
	
}
