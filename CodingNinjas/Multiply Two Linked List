/*Linked List Node Class

class LinkedListNode<T> {
    T data;
    LinkedListNode<T> next;
    
    public LinkedListNode(T data) {
        this.data = data;
        this.next = null;
    }
}

*/

public class Solution {
    
    public static void multiply(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        head1 = reverse(head1);
		head2 = reverse(head2);

		LinkedListNode<Integer> ans=new LinkedListNode(-1);
		LinkedListNode<Integer> ans_itr = ans;
		LinkedListNode<Integer> head2_itr = head2;

		while(head2_itr != null)
		{
			LinkedListNode<Integer> head = multiplyLinkedListWithDigit(head1, head2_itr.data);
			head2_itr = head2_itr.next;
			ans_itr = addTwoLinkedList(ans_itr,head);
			ans_itr = ans_itr.next;
		}
		ans = ans.next;
		ans = reverse(ans);
		print(ans);
    }

    public static void print(LinkedListNode<Integer> head)
	{
		LinkedListNode<Integer> curr = head;
		while(curr != null)
		{
			System.out.print(curr.data + " ");
			curr = curr.next;
		}
	}
    
    public static LinkedListNode reverse(LinkedListNode<Integer> head)
	{
		LinkedListNode<Integer> prev = null, current = head, next;
		while(current != null)
		{
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		return prev;
	}
	
	public static LinkedListNode addTwoLinkedList(LinkedListNode<Integer> l1,LinkedListNode<Integer> l2)
	{
		LinkedListNode<Integer> prev = l1;
		int carry = 0;
		while(l2 != null || carry != 0)
		{
		    int val1 = (prev.next != null ? (prev.next.data).intValue() : 0);
		    int val2 = (l2 != null ? (l2.data).intValue() : 0);
			int sum = carry + val1 + val2;
			carry = sum/10;
			sum = sum%10;

			if(prev.next != null)
			{
				prev.next.data = sum;
			}
			else 
			{
				prev.next = new LinkedListNode(sum);
			}
			if(l2 != null)
			{
				l2 = l2.next;
			}
			prev = prev.next;
		}
		return l1;
	}
	
	public static LinkedListNode multiplyLinkedListWithDigit(LinkedListNode<Integer> l1,int digit)
	{
		LinkedListNode<Integer> head = new LinkedListNode(-1);
		LinkedListNode<Integer> curr = head;

		int carry = 0;
		while(l1 != null || carry != 0)
		{
		    int val = (l1 != null ? (l1.data).intValue() : 0);
		    val = (val * digit);
			int sum = carry + val;
			carry = sum/10;
			sum = sum%10;
			curr.next = new LinkedListNode(sum);
			if(l1 != null)
			{
				l1 = l1.next;
			}
			curr = curr.next;
		}
		return head.next;
	}
    
}
